import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

user_data = {}

questions = [
    {
        "text": "–¢—ã –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏–ª–∏ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π?",
        "options": ["–ª—é–¥–∏", "+/-", "—Ç–µ—Ö–Ω–∏–∫–∞"]
    },
    {
        "text": "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Ä–µ—à–∞—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏?",
        "options": ["–¥–∞", "+/-", "–Ω–µ—Ç"]
    },
    {
        "text": "–¢—ã –ª—é–±–∏—à—å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è?",
        "options": ["–¥–∞", "+/-", "–Ω–µ—Ç"]
    },
    {
        "text": "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∏—Å–∫—É?",
        "options": ["—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "+/-", "—Ä–∏—Å–∫"]
    },
    {
        "text": "–¢–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —É—á–∏—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?",
        "options": ["–¥–∞", "+/-", "–Ω–µ—Ç"]
    },
    {
        "text": "–¢—ã —Å—á–∏—Ç–∞–µ—à—å —Å–µ–±—è —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–º?",
        "options": ["–¥–∞", "+/-", "–Ω–µ—Ç"]
    },
    {
        "text": "–ö–∞–∫–∏–µ —É —Ç–µ–±—è –æ–±—ã—á–Ω–æ –æ—Ü–µ–Ω–∫–∏?",
        "options": ["–æ—Ç–ª–∏—á–Ω—ã–µ", "—Ö–æ—Ä–æ—à–∏–µ", "—Å—Ä–µ–¥–Ω–∏–µ(+/-)", "–ø–ª–æ—Ö–∏–µ"]
    }
]

options = {
    "1": ["–ª—é–¥–∏", "–¥–∞", "–Ω–µ—Ç", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–¥–∞", "–¥–∞", "—Ö–æ—Ä–æ—à–∏–µ"],
    "2": ["—Ç–µ—Ö–Ω–∏–∫–∞", "–¥–∞", "–Ω–µ—Ç", "—Ä–∏—Å–∫", "–Ω–µ—Ç", "–¥–∞", "–æ—Ç–ª–∏—á–Ω—ã–µ"],
    "3": ["–ª—é–¥–∏", "–Ω–µ—Ç", "–¥–∞", "—Ä–∏—Å–∫", "–¥–∞", "–Ω–µ—Ç", "—Å—Ä–µ–¥–Ω–∏–µ(+/-)"],
    "4": ["—Ç–µ—Ö–Ω–∏–∫–∞", "–Ω–µ—Ç", "–¥–∞", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–Ω–µ—Ç", "–Ω–µ—Ç", "–ø–ª–æ—Ö–∏–µ"],
    "5": ["–ª—é–¥–∏", "–Ω–µ—Ç", "–Ω–µ—Ç", "—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–Ω–µ—Ç", "–Ω–µ—Ç", "–ø–ª–æ—Ö–∏–µ"]
}

results = {
    "1": "–ü—Å–∏—Ö–æ–ª–æ–≥, —É—á–∏—Ç–µ–ª—å, HR-–º–µ–Ω–µ–¥–∂–µ—Ä",
    "2": "–ò–Ω–∂–µ–Ω–µ—Ä, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "3": "–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥, –¥–∏–∑–∞–π–Ω–µ—Ä, –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
    "4": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–∏—Å–∞—Ç–µ–ª—å, –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä, –º–µ—Ö–∞–Ω–∏–∫",
    "5": "–ë–æ–º–∂, –Ω–∏–∫—Ç–æ, –±–µ–∑–¥–æ–º–Ω—ã–π, –¥–≤–æ—Ä–Ω–∏–∫, –ê–ª–∫–∞—à, —á–µ–ª–æ–≤–µ–∫ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞"
}

descriptions = {
    "1": "–¢—ã –±–æ–ª—å—à–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Ä–∞–±–æ—Ç—É —Å –ª—é–¥—å–º–∏, –ª—é–±–∏—à—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–º–æ–≥–∞—Ç—å –¥—Ä—É–≥–∏–º. –¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.",
    "2": "–¢—ã —Ç–µ—Ö–Ω–∞—Ä—å: –ª–æ–≥–∏–∫–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ —Å–ª–æ–∂–Ω—ã–º –∑–∞–¥–∞—á–∞–º ‚Äî —ç—Ç–æ –ø—Ä–æ —Ç–µ–±—è.",
    "3": "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, –Ω–µ –±–æ–∏—à—å—Å—è —Ä–∏—Å–∫–∞, –ª—é–±–∏—à—å –æ–±—â–µ–Ω–∏–µ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ. –≠—Ç–æ –ø—É—Ç—å –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞.",
    "4": "–¢—ã –∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç, —Ç–∏—Ö–∏–π –º–∞—Å—Ç–µ—Ä —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞, –ª—é–±–∏—à—å —Ç–µ—Ö–Ω–∏–∫—É –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å. –ü–æ–¥–æ–π–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏.",
    "5": "–ü–æ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º –≤—ã—Ö–æ–¥–∏—Ç, —á—Ç–æ –ø–æ–∫–∞ –Ω–µ—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ–æ–±—â–µ. –í–ø—Ä–æ—á–µ–º, —ç—Ç–æ —Ç–æ–∂–µ –ø—É—Ç—å‚Ä¶ –Ω–æ –º–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ? üôÇ"
}

@bot.message_handler(commands=['start', 'retry'])
def start(message):
    chat_id = message.chat.id
    user_data[chat_id] = {'step': 0, 'answers': []}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    send_question(chat_id, 0)

def send_question(chat_id, step):
    q = questions[step]
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for opt in q["options"]:
        markup.add(KeyboardButton(opt))
    bot.send_message(chat_id, q["text"], reply_markup=markup)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
        return

    data = user_data[chat_id]
    step = data['step']

    valid_options = [opt.lower().strip() for opt in questions[step]["options"]]
    user_answer = message.text.lower().strip()

    if user_answer not in valid_options:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    data['answers'].append(user_answer)
    data['step'] += 1

    if data['step'] < len(questions):
        send_question(chat_id, data['step'])
    else:
        key, result_text, reason = process_answers(data['answers'])
        bot.send_message(chat_id, f"üîç {reason}")
        bot.send_message(chat_id, f"üíº –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ–±—è: {result_text}")
        bot.send_message(chat_id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏ /start")
        del user_data[chat_id]

def process_answers(answers):
    best_score = -1
    best_key = "1"

    for key, vals in options.items():
        score = 0
        for i in range(len(answers)):
            user_ans = answers[i].strip().lower()
            correct_ans = vals[i].strip().lower()

            if user_ans == correct_ans:
                score += 1
            elif user_ans == "+/-" or correct_ans == "+/-" or "—Å—Ä–µ–¥–Ω–∏–µ" in user_ans and "—Å—Ä–µ–¥–Ω–∏–µ" in correct_ans:
                score += 0.5

        if score > best_score:
            best_score = score
            best_key = key

    return best_key, results[best_key], descriptions[best_key]

bot.polling()
